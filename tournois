import random
import joueurs as j

class Tournoi:
    def __init__(self,nom):
        self.nom = nom
        self.lieu = ""
        self.date = ""
        self.tours = 4
        self.tournées = []
        self.participants = []
        self.time = []
        self.description = ""


class Joueur:
    def __init__(self,nom,family_name,rank):
        self.nom = nom
        self.family_name = family_name
        self.birthday = ""
        self.sexe = []
        self.rank = rank
        self.point = 0


class Tour:
    def __init__(self,tournois,match,nom,date_heure_début,date_heure_fin):
        self.tournois = tournois
        self.match = match
        self.nom = nom
        self.date_heure_début = date_heure_début
        self.date_heure_fin = date_heure_fin


class Match:
    def __init__(self,n_match,joueur1,joueur2,winner):
        self.n_match = f"match {n_match}"
        self.joueur1 = joueur1
        self.joueur2 = joueur2
        self.winner = winner


# Création du nombre de joueurs à partir des noms et prénoms, attribués aléatoirement ainsi qu'un classement de base.
def joueurs(nb_joueurs):
    joueur_list = []
    for p in range(nb_joueurs):
        nom = j.nom()
        prenom = j.prenom()
        joueur_list.append(
            Joueur(random.choice(prenom),
            random.choice(nom),
            random.randint(800,1500))
            )
    return joueur_list


def menu():
    # Plus tard: va chercher si un fichier est vide et extrait les données s'il y a des tournois dedans.
    tournois = []

    # Permanent: 
    running = True
    while running == True:
        print("\n Menu principal\n1: Créer un tournoi\n2: Regarder stats tournoi\n3: Sauvegarder/Charger\n4: Exit")
        choix1 = int(input("Quel choix? : "))

        # Création tournois
        if choix1 == 1:
            tn = create_new_tournament()
            tournois.append(tn)

        # Récupération/affichage des stats
        elif choix1 == 2:
            if len(tournois) >= 1:
                print("\n Quelles stats voulez-vous voir?\n1: Joueurs\n2: Matches\n3: Exit")
                choix2 = int(input("Quel choix? : "))

                if choix2 == 1:
                    # joueurs
                    rapport()

                elif choix2 == 2:
                    # match
                    rapport()

                elif choix2 == 3:
                    print("Goodbye ! ")
                    running = False
            else:
                print("Il n'y a pas encore de tournoi !!")

        # Fermeture de l'application
        elif choix1 == 4:
            print("Goodbye ! ")
            running = False

        
    # système de sauvegarde
    # menu
    pass


def pair(tournoi,pool,tour):
    # Trie à partir du rang des joueurs
    pairs = []
    if tour == 1:
        sorted_list = sorted(pool,key = lambda joueur: joueur.rank,reverse=True)
        # modulable pour plus de joueurs
        top_tier = sorted_list[0:int(len(sorted_list)/2)]
        low_tier = sorted_list[len(top_tier):len(sorted_list)+1]
        # attribution d'une paire en fonction de leur classement et de leurs résultats (en ronde suisse)
        index = 0
        for pair in range(len(top_tier)) :
            pick = top_tier[index]
            pick2 = low_tier[index]
            pairs.append([[pick,pick2],[]])
            if index <= len(top_tier):
                index += 1

    # Trie à partir de leurs points
    else:
        sorted_list = sorted(pool,key = lambda joueur: (joueur.point,joueur.rank),reverse=True)
        for index in range(len(sorted_list)):
            if index <= len(sorted_list)-2:
                pick = sorted_list[index]
                pick2 = sorted_list[index+1]
                for Tour in tournoi.tournées:
                    if pick in Tour.match[0][0] and pick2 in Tour.match[0][0]:
                        pick2 = sorted_list[index+2]
                pairs.append([[pick,pick2],[]])
                sorted_list.remove(pick)
                sorted_list.remove(pick2)

    return pairs

def rapport():
    pass

def resultat(pairs):
    for pair in pairs:
        p1 = pair[0][0]
        p2 = pair[0][1]
        outcome = [1,0,1/2]
        result = random.choice(outcome)
        if result == 1 or result == 0:
            winner = random.choice((p1,p2))
            winner.point += 1
            pair[1] = winner
        else:
            p1.point += result
            p2.point += result
            pair[1] = "EGALITE"

    return tuple(pairs)


def create_new_tournament():
    # 1. Créer un nouveau tournoi.
    tournoi = Tournoi(input("Nom du tournois : "))

    # 2. Ajouter huit joueurs.
    joueur = joueurs(int(input("Nombre de joueurs : ")))
    for player in joueur:
        tournoi.participants.append(player)

    # 3. L'ordinateur génère des paires de joueurs pour le premier tour.
    for tours in range(1,tournoi.tours + 1) :
        pairs = pair(tournoi,tournoi.participants,tours)
        # heure de début et fin aléatoire
        début = [random.randint(12,19),random.randint(0,59)]
        fin = [début[0] + random.randint(1,3),random.randint(0,59)]
        tour = Tour(
            tournoi,
            pairs,
            "Round {}".format(tours),
            "{}h{}".format(début[0],début[1]),
            "{}h{}".format(fin[0],fin[1])
            )
        # 4. Lorsque le tour est terminé, entrez les résultats.
        resultat(pairs)
        tournoi.tournées.append(tour)

    # Test sauvegarde et usage de classe MATCH
    for round in tournoi.tournées:
        for match in round.match:
            match = Match(tours,round.match[0][0][0],round.match[0][0][1],round.match[0][1])
            
    # 5. Répétez les étapes 3 et 4 pour les tours suivants jusqu'à ce que tous les tours soient joués, et que le tournoi soit terminé.
    print("Finito !")
    return tournoi

def main():
    menu()
                                                               
if __name__ == '__main__':
    main()
